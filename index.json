[{"content":"安装Homebrew 打开终端，复制以下代码到终端，按回车即可：\n/usr/bin/ruby -e \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026#34;    词汇 含义     formula (e) 安装包的描述文件，formulae 为复数   cellar 安装好后所在的目录   keg 具体某个包所在的目录，keg 是 cellar 的子目录   bottle 预先编译好的包，不需要现场下载编译源码，速度会快很多；官方库中的包大多都是通过 bottle 方式安装   tap 下载源，可以类比于 Linux 下的包管理器 repository   cask 安装 macOS native 应用的扩展，你也可以理解为有图形化界面的应用。   bundle 描述 Homebrew 依赖的扩展       Command Description     brew search [关键词] search software   brew install [软件名] Install software   brew list List all packages installed   brew upgrade upgrade software   brew uninstall [软件名] Uninstall software   brew info [软件名] Get software info   brew cleanup Clean up old software    管理后台软件 诸如 Nginx、MySQL 等软件，都是有一些服务端软件在后台运行，如果你希望对这些软件进行管理，可以使用 brew services 命令来进行管理\n   Command Description     brew services list Get services list   brew services run [服务名] Run service   brew services start [服务名] Start service and set autostart   brew services stop [服务名] Stop service   brew services restart [服务名] Restart service    Resource  https://sspai.com/post/56009  ","permalink":"https://kanebetter.github.io/posts/intro-to-homebrew/","summary":"安装Homebrew 打开终端，复制以下代码到终端，按回车即可：\n/usr/bin/ruby -e \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026#34;    词汇 含义     formula (e) 安装包的描述文件，formulae 为复数   cellar 安装好后所在的目录   keg 具体某个包所在的目录，keg 是 cellar 的子目录   bottle 预先编译好的包，不需要现场下载编译源码，速度会快很多；官方库中的包大多都是通过 bottle 方式安装   tap 下载源，可以类比于 Linux 下的包管理器 repository   cask 安装 macOS native 应用的扩展，你也可以理解为有图形化界面的应用。   bundle 描述 Homebrew 依赖的扩展       Command Description     brew search [关键词] search software   brew install [软件名] Install software   brew list List all packages installed   brew upgrade upgrade software   brew uninstall [软件名] Uninstall software   brew info [软件名] Get software info   brew cleanup Clean up old software    管理后台软件 诸如 Nginx、MySQL 等软件，都是有一些服务端软件在后台运行，如果你希望对这些软件进行管理，可以使用 brew services 命令来进行管理","title":"Intro to Homebrew"},{"content":"Before I use Alfred, I thought it was not that useful, some YouTubers just exaggerate its function.\nAnd I will not use it some much time in a day.\nHere is the top 12 workflow I recommend to anyone who uses Mac.\n1. Youtube Music 2. VS Code 3. TimeZone 4. Things 5. Temporary Mail 6. Reminders 7. Notion 8. GitHub 9. Calculate 10. Browser Tabs 11. Advanced Google Map 12. kill ","permalink":"https://kanebetter.github.io/posts/top12-alfred-workflow/","summary":"Before I use Alfred, I thought it was not that useful, some YouTubers just exaggerate its function.\nAnd I will not use it some much time in a day.\nHere is the top 12 workflow I recommend to anyone who uses Mac.\n1. Youtube Music 2. VS Code 3. TimeZone 4. Things 5. Temporary Mail 6. Reminders 7. Notion 8. GitHub 9. Calculate 10. Browser Tabs 11. Advanced Google Map 12.","title":"Top12 Alfred Workflow"},{"content":"The Perfect Commit   Add the rightchanges\n Include changes for only one topic, git add -p index.html    Compose a goodcommit message, git commit\n  Subject = concise summary of what happened\n  Body = more detailed explanation\n  What is now different then before?\n  What\u0026rsquo;s the reason for the change?\n  Is there anything to watch out for / anything particularly remarkable?\n      Branching Strategies A Written Convention Agree on a Branching Worflow in Your Team\n  Git allows you to create branches but it doesn\u0026rsquo;t tell you how to use them!\n  You need a written best practice of how work is ideally structured in your team to avoid mistakes \u0026amp; collisions.\n  It highly depends on your team / team size, on your project, and how you handle releases.\n  It helps to onboard new team member (\u0026ldquo;this is how we work here\u0026rdquo;).\n  Integrating Changes \u0026amp; Structuring Releases   Mainline Development (“Always Be Integrating”)\n  few branches\n  relatively small commits\n  high-quality testing \u0026amp; QA standards\n    State, Release, and Feature Branches\n different types of branches\u0026hellip; ..fulfill different types of jobs    Long-Running \u0026amp; Short-Lived Branches\n exist through the complete lifetime of the project often, they mirror “stages\u0026quot; in your dev life cycle common convention: no direct commits!    Difference between git merge, git rebase, and git cherry-pick   git merge will create commits in your branch. The commit will have all the changes in the branch that you want to merge. git merge \u0026lt;branch\u0026gt;\n  git cherry-pick \u0026lt;commit-ID\u0026gt; -n no commit. git cherry-pick can only merge one commit after your changes.\n  git rebase will rebase your changes into the branch you want to rebase. Your changes will be after the rebase branch changes.\n  git config --global --list\nResource   Introduction to Git\n  Git for Professionals Tutorial - Tools \u0026amp; Concepts for Mastering Version Control with Git - YouTube\n  ","permalink":"https://kanebetter.github.io/posts/everything-about-git/","summary":"The Perfect Commit   Add the rightchanges\n Include changes for only one topic, git add -p index.html    Compose a goodcommit message, git commit\n  Subject = concise summary of what happened\n  Body = more detailed explanation\n  What is now different then before?\n  What\u0026rsquo;s the reason for the change?\n  Is there anything to watch out for / anything particularly remarkable?","title":"Everything About Git"},{"content":"","permalink":"https://kanebetter.github.io/categories/","summary":"categories","title":"Categories"},{"content":"","permalink":"https://kanebetter.github.io/tags/","summary":"tags","title":"Tags"}]