[{"content":"The Perfect Commit   Add the rightchanges\n Include changes for only one topic, git add -p index.html    Compose a goodcommit message, git commit\n  Subject = concise summary of what happened\n  Body = more detailed explanation\n  What is now different then before?\n  What\u0026rsquo;s the reason for the change?\n  Is there anything to watch out for / anything particularly remarkable?\n      Branching Strategies A Written Convention Agree on a Branching Worflow in Your Team\n  Git allows you to create branches but it doesn\u0026rsquo;t tell you how to use them!\n  You need a written best practice of how work is ideally structured in your team to avoid mistakes \u0026amp; collisions.\n  It highly depends on your team / team size, on your project, and how you handle releases.\n  It helps to onboard new team member (\u0026ldquo;this is how we work here\u0026rdquo;).\n  Integrating Changes \u0026amp; Structuring Releases   Mainline Development (“Always Be Integrating”)\n  few branches\n  relatively small commits\n  high-quality testing \u0026amp; QA standards\n    State, Release, and Feature Branches\n different types of branches\u0026hellip; ..fulfill different types of jobs    Long-Running \u0026amp; Short-Lived Branches\n exist through the complete lifetime of the project often, they mirror “stages\u0026quot; in your dev life cycle common convention: no direct commits!    Difference between git merge, git rebase, and git cherry-pick   git merge will create commits in your branch. The commit will have all the changes in the branch that you want to merge. git merge \u0026lt;branch\u0026gt;\n  git cherry-pick \u0026lt;commit-ID\u0026gt; -n no commit. git cherry-pick can only merge one commit after your changes.\n  git rebase will rebase your changes into the branch you want to rebase. Your changes will be after the rebase branch changes.\n  git config --global --list\nResource   Introduction to Git\n  Git for Professionals Tutorial - Tools \u0026amp; Concepts for Mastering Version Control with Git - YouTube\n  ","permalink":"https://kanebetter.github.io/posts/everything-about-git/","summary":"The Perfect Commit   Add the rightchanges\n Include changes for only one topic, git add -p index.html    Compose a goodcommit message, git commit\n  Subject = concise summary of what happened\n  Body = more detailed explanation\n  What is now different then before?\n  What\u0026rsquo;s the reason for the change?\n  Is there anything to watch out for / anything particularly remarkable?","title":"Everything About Git"},{"content":"Run command\nhugo new posts/\u0026lt;name\u0026gt;.md git push ","permalink":"https://kanebetter.github.io/posts/how-to-create-new-article/","summary":"Run command\nhugo new posts/\u0026lt;name\u0026gt;.md git push ","title":"How to Create New Article"},{"content":"Overview in Bazel Bazel is an open-source build and test tool similar to Make, Maven, and Gradle. It uses a human-readable, high-level build language. Bazel supports projects in multiple languages and builds outputs for multiple platforms. Bazel supports large codebases across multiple repositories, and large numbers of users.\nLOC Statistics and Measuring At first, we used command git ls-files | grep -E '.java' | xargs wc -l to calculate the LOC of the cloned local repository. But rather than printing the numbers as a whole, it output the sums separately for several times.\nCommand Line Results\nAs an alternative we used other online tools like https://codetabs.com/count-loc/count-loc-online.html. As the whole project is too big for the site to compute (853 MB, mainly due to a large .git directory), we uploaded only the /src part of the project, and got the following result:\n","permalink":"https://kanebetter.github.io/posts/try/","summary":"Overview in Bazel Bazel is an open-source build and test tool similar to Make, Maven, and Gradle. It uses a human-readable, high-level build language. Bazel supports projects in multiple languages and builds outputs for multiple platforms. Bazel supports large codebases across multiple repositories, and large numbers of users.\nLOC Statistics and Measuring At first, we used command git ls-files | grep -E '.java' | xargs wc -l to calculate the LOC of the cloned local repository.","title":"Try"},{"content":"Hi\n","permalink":"https://kanebetter.github.io/posts/my-first-post/","summary":"Hi","title":"My First Post"},{"content":"","permalink":"https://kanebetter.github.io/categories/","summary":"categories","title":"Categories"},{"content":"","permalink":"https://kanebetter.github.io/tags/","summary":"tags","title":"Tags"}]